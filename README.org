#+BEGIN_HTML
<img src="https://www.gnu.org/software/emacs/images/emacs.png" alt="Emacs Logo" width="80" height="80" align="right">
#+END_HTML
#+TITLE: Emacs Performance

-----
Emacs is a Lisp interpreter developed long before modern Operating Systems existed. It is a very old software, older than most of our parents. Over the years, I have learned a lot about Emacs, thanks to the community.

** Building from Source
It is highly recommended to build Emacs from the source code. This allows you to modify the source code and build a custom version optimized for performance. It is not hard by any means, as multiple guides are available online.

These flags provided me with the best performance:
#+begin_src sh
./autogen.sh \
       && ./configure CFLAGS="-march=native -Ofast -fno-finite-math-only -pipe \
-fgraphite-identity -floop-nest-optimize -fdevirtualize-at-ltrans -fipa-pta \
-fno-semantic-interposition" \
--with-modules --without-compress-install --with-x-toolkit=lucid \
--with-xft --with-xaw3d --without-toolkit-scroll-bars --without-gsettings \
--with-gconf --with-mailutils --with-native-compilation=aot --with-tree-sitter --without-cairo
#+end_src

** Emacs Daemon (Must)
Emacs has a slow startup issue that prevents a lot of users from using it, but out of the box, its loading is blazing fast. However, most users will face this issue when they start developing their 'init.el'.

The Emacs daemon is a server whose purpose is to load the 'init.el' at startup. This eliminates the need to load it repeatedly, greatly improving startup time.

To enable the daemon:
#+begin_src shell
systemctl --user enable emacs.service
systemctl --user start emacs.service

# When you need to restart the Emacs daemon
systemctl --user restart emacs.service
#+end_src

** Early-init.el
This is a dedicated file to reduce loading time. Mainly, I use it for garbage collection, UI, and setting fonts.

*** Increase 'gc-cons-threshold' to 100MB for LSP-heavy buffers.
#+begin_src elisp
(setq gc-cons-threshold 100000000)

;; Improve performance with language servers.
(setq read-process-output-max (* 1024 1024)) ;; 1 MB
#+end_src

*** Tree-sitter Performance Enhancement
#+begin_src elisp
(setenv "LSP_USE_PLISTS" "true")
(setq lsp-use-plists t)
#+end_src

*** Disable 'file-name-handler-alist' during startup and re-enable it later for speed.
#+begin_src elisp
(defvar startup/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist startup/file-name-handler-alist)
            (makunbound 'startup/file-name-handler-alist)))
#+end_src

*** Speed up package loading and load packages only when needed.
#+begin_src elisp
(setq package-quickstart t)

(setq use-package-always-defer t)
#+end_src

*** Suppress the startup screen; *scratch* buffer will be the home buffer.
#+begin_src elisp
(setq
 inhibit-splash-screen t
 inhibit-startup-screen t
 inhibit-startup-message t
 inhibit-startup-buffer-menu t)
#+end_src

*** Disable backup files and the modeline while loading.
#+begin_src elisp
(setq
 mode-line-format nil
 make-backup-files nil
 backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

*** Set up the scratch buffer with 'fundamental-mode'.
It is important to configure the scratch buffer to open with 'fundamental-mode' to avoid increasing load time.
#+begin_src elisp
(setq initial-major-mode 'fundamental-mode)
#+end_src

*** Fonts
Avoid using 'set-face-attributes'.
#+begin_src elisp
(custom-set-faces
 ;; Default font for all text
 '(default ((t (:family "Roboto Mono" :height 110))))
 '(fixed-pitch ((t (:family "Roboto Mono" :height 100))))

 ;; Current line number
 '(line-number-current-line ((t (:foreground "yellow" :inherit line-number))))
 '(mode-line ((t (:family "Roboto Mono" :weight Bold))))

 ;; Comments in italic
 '(font-lock-function-name-face ((t (:family "Roboto Mono" :slant italic))))
 '(font-lock-variable-name-face ((t (:family "Roboto Mono" :weight bold)))))
#+end_src

** Init.el
Moving on to the main file 'init.el'. The first thing I prioritize in my personal configuration is setting 'native-comp' speed and flags. These are important for enhancing performance.

*** Maximum Native ELN Speed
Changing 'native-comp-speed' for better performance:
#+begin_src elisp
(setq native-comp-speed 3)

(native-compile-async "/usr/lib/emacs/30.2/native-lisp" 'recursively)
(setq native-comp-compiler-options '("-march=znver3" "-Ofast" "-g0" "-fno-finite-math-only" "-fgraphite-identity" "-floop-nest-optimize" "-fdevirtualize-at-ltrans" "-fipa-pta" "-fno-semantic-interposition"))
#+end_src

Ensure you set the 'native-lisp' location correctly; otherwise, there will be an error at startup. Use 'C-h v native-comp-eln-load-path' to check the location. The flags mentioned above are for ...

*** Use straight.el
'*Use-package*' installs packages but does not compile them, which is needed here.

*** Use-package Compute Statistics
It is useful to know how much time packages are taking. Place this at the top of 'init.el' to use the 'use-package-report' function.
#+begin_src elisp
(require 'use-package)
(setq use-package-compute-statistics t)
#+end_src

...

*** Avoid Require
Avoid 'require' as it loads the package or file each and every time you load your configuration.

*** LSP
Disable LSP logging:
#+begin_src elisp
(setq lsp-log-io nil)
#+end_src
